spring.application.name=smart-contect-manager
server.port=8081
spring.datasource.url=jdbc:mysql://localhost:3306/scm?allowPublicKeyRetrieval=true&useSSL=false&&serverTimezone=UTC&useLegacyDatetimeCode=falses
spring.datasource.username=root
spring.datasource.password=7240206681
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect


#JPA Configurations
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

#Spring Security Configuration
# spring.security.user.name=Sonu
# spring.security.user.password=1234

#Google Login Configuration
# spring.security.oauth2.client.registration.Google.client-name=google
# spring.security.oauth2.client.registration.google.provider=google
# spring.security.oauth2.client.registration.google.client-id=1046282933305-v43altbaine8ep6haldt2fot3ifdf7gl.apps.googleusercontent.com
# spring.security.oauth2.client.registration.google.client-secret=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
# spring.security.oauth2.client.registration.google.scope=email,profile

# Google OAuth2 Client Configuration
spring.security.oauth2.client.registration.google.client-id=1046282933305-v43altbaine8ep6haldt2fot3ifdf7gl.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=openid, profile, email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.client-name=Google

# Provider URLs for Google
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub


#Github Login Configuration
spring.security.oauth2.client.registration.github.client-id=Iv23lig5hv5dPDmQAOYH
spring.security.oauth2.client.registration.github.client-secret=180978a6bc26f1c0647f7d837314ae9853685b7f
spring.security.oauth2.client.registration.github.scope=read:user
spring.security.oauth2.client.registration.github.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.github.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.github.client-name=GitHub
spring.security.oauth2.client.provider.github.authorization-uri=https://github.com/login/oauth/authorize
spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token
spring.security.oauth2.client.provider.github.user-info-uri=https://api.github.com/user
spring.security.oauth2.client.provider.github.user-name-attribute=id


# #Facebook Login Configuration
# spring.security.oauth2.client.registration.Facebook.client-name=Facebook
# spring.security.oauth2.client.registration.Facebook.client-id=v43altbaine8ep6haldt2fot3ifdf7gl
# spring.security.oauth2.client.registration.Facebook.client-secret=GOCSPX
# spring.security.oauth2.client.registration.Facebook.scope=email,profile

# logging.level.org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter=OFF


# spring.datasource.hikari.maximum-pool-size=10
# spring.datasource.hikari.minimum-idle=5
# spring.datasource.hikari.idle-timeout=30000
# spring.datasource.hikari.max-lifetime=1800000
# spring.datasource.hikari.connection-timeout=30000

# Specify explicitly the dialect (here for PostgreSQL, adapt for your database)
# spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Disable Hibernate usage of JDBC metadata
# spring.jpa.properties.hibernate.boot.allow_jdbc_metadata_access=false
# spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

# Database initialization should typically be performed outside of Spring lifecycle
# spring.sql.init.mode=never
# spring.datasource.hikari.allow-pool-suspension=true